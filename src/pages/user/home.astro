---
import MainLayout from '../../layouts/MainLayout.astro';
import CategoryDisplay from '../../components/CategoryDisplay.astro';
import ProductGrid from '../../components/ProductGrid.astro';
// Nota: Removemos la importación de getProducts aquí porque lo cargaremos del lado del cliente
---

<MainLayout title="FreshBites - Productos">
  <div class="bg-white rounded-lg shadow-md p-6">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Nuestros Productos</h1>
    
    <!-- Componente de categorías -->
    <div class="mb-8">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Categorías</h2>
      <CategoryDisplay />
    </div>
    
    <!-- Productos destacados -->
    <div class="mb-10">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Productos destacados</h2>
      <div id="featured-products-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <div class="text-center py-6 bg-gray-50 rounded-lg">
          <p class="text-gray-500">Cargando productos destacados...</p>
        </div>
      </div>
    </div>
    
    <!-- Todos los productos por categoría -->
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Todos los Productos</h2>
    <div id="all-products-container">
      <div class="text-center py-6 bg-gray-50 rounded-lg">
        <p class="text-gray-500">Cargando productos...</p>
      </div>
    </div>
  </div>

  <!-- Toast de notificación -->
  <div id="toast" class="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg transform translate-y-20 opacity-0 transition-all duration-300">
    <p id="toast-message">Producto añadido al carrito</p>
  </div>

  <script>
    import { addToCart, getCartItemCount } from '../../services/cartService';
    
    // User page protection
    function checkUserAuth() {
      const userStr = localStorage.getItem('freshbites_current_user');
      if (!userStr) {
        // Not logged in, redirect to login
        window.location.href = '/login';
        return null;
      }
      
      const user = JSON.parse(userStr);
      return user;
    }

    // Obtener productos del localStorage
    function getProducts() {
      try {
        const productsStr = localStorage.getItem('products');
        return productsStr ? JSON.parse(productsStr) : [];
      } catch (error) {
        console.error('Error al obtener productos:', error);
        return [];
      }
    }

    // Obtener categorías del localStorage
    function getCategories() {
      try {
        const categoriesStr = localStorage.getItem('categories');
        return categoriesStr ? JSON.parse(categoriesStr) : [];
      } catch (error) {
        console.error('Error al obtener categorías:', error);
        return [];
      }
    }

    // Función para obtener una categoría por ID
    function getCategoryById(categoryId) {
      const categories = getCategories();
      return categories.find(cat => cat.id === categoryId) || null;
    }

    // Formatear precio
    function formatPrice(price) {
      return new Intl.NumberFormat('es-CR', {
        style: 'currency',
        currency: 'CRC'
      }).format(price);
    }

    // Mostrar toast de notificación
    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      const toastMessage = document.getElementById('toast-message');
      
      if (toast && toastMessage) {
        toast.classList.remove('translate-y-20', 'opacity-0', 'bg-green-600', 'bg-red-600');
        toast.classList.add(isError ? 'bg-red-600' : 'bg-green-600');
        toastMessage.textContent = message;
        
        setTimeout(() => {
          toast.classList.remove('translate-y-20', 'opacity-0');
          toast.classList.add('translate-y-0', 'opacity-100');
        }, 10);
        
        setTimeout(() => {
          toast.classList.remove('translate-y-0', 'opacity-100');
          toast.classList.add('translate-y-20', 'opacity-0');
        }, 3000);
      }
    }

    // Crear tarjeta de producto HTML
    function createProductCard(product) {
      const category = getCategoryById(product.categoryId);
      const categoryName = category ? category.name : 'Sin categoría';
      
      return `
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow">
          <div class="h-48 bg-gray-100 flex items-center justify-center overflow-hidden">
            ${product.imageBase64 
              ? `<img src="${product.imageBase64}" alt="${product.name}" class="h-full w-full object-cover">`
              : `<span class="text-gray-500">Imagen no disponible</span>`
            }
          </div>
          <div class="p-4">
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-medium text-gray-900">${product.name}</h3>
              <span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                ${categoryName}
              </span>
            </div>
            ${product.description 
              ? `<p class="text-gray-600 mt-2 text-sm line-clamp-2">${product.description}</p>`
              : ''
            }
            <div class="mt-3 flex justify-between items-center">
              <span class="text-green-600 font-medium">${formatPrice(product.price)}</span>
              <button 
                class="bg-green-600 hover:bg-green-700 text-white text-sm py-1.5 px-3 rounded"
                data-product-id="${product.id}"
              >
                Agregar
              </button>
            </div>
          </div>
        </div>
      `;
    }

    // Actualizar contador del carrito
    function updateCartCount() {
      const cartCountElement = document.getElementById('cartCount');
      if (cartCountElement) {
        const count = getCartItemCount();
        cartCountElement.textContent = count.toString();
        
        // Ocultar contador si no hay productos
        if (count === 0) {
          cartCountElement.classList.add('hidden');
        } else {
          cartCountElement.classList.remove('hidden');
        }
      }
    }

    // Renderizar productos destacados
    function renderFeaturedProducts() {
      const featuredContainer = document.getElementById('featured-products-container');
      if (!featuredContainer) return;
      
      const allProducts = getProducts();
      // Obtener los primeros 3 productos como destacados
      const featuredProducts = allProducts.slice(0, 3);
      
      if (featuredProducts.length > 0) {
        featuredContainer.innerHTML = featuredProducts
          .map(product => createProductCard(product))
          .join('');
      } else {
        featuredContainer.innerHTML = `
          <div class="text-center py-6 bg-gray-50 rounded-lg col-span-3">
            <p class="text-gray-500">No hay productos destacados disponibles</p>
          </div>
        `;
      }
      
      // Agregar eventos a los botones
      addAddToCartEvents();
    }

    // Renderizar todos los productos por categoría
    function renderAllProducts() {
      const productsContainer = document.getElementById('all-products-container');
      if (!productsContainer) return;
      
      const categories = getCategories();
      const allProducts = getProducts();
      
      // Agrupar productos por categoría
      const productsByCategory = categories.map(category => {
        const products = allProducts.filter(product => product.categoryId === category.id);
        return {
          category,
          products
        };
      });
      
      // Filtrar solo categorías con productos
      const categoriesWithProducts = productsByCategory.filter(item => item.products.length > 0);
      
      if (categoriesWithProducts.length === 0) {
        productsContainer.innerHTML = `
          <div class="text-center py-8">
            <h3 class="text-xl font-semibold text-gray-700 mb-2">No hay productos disponibles</h3>
            <p class="text-gray-500">Vuelve pronto para ver nuestras novedades</p>
          </div>
        `;
        return;
      }
      
      productsContainer.innerHTML = categoriesWithProducts
        .map(({ category, products }) => `
          <div class="mb-10">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-xl font-semibold text-gray-800">${category.name}</h2>
              <a href="/category/${category.id}" class="text-sm text-green-600 hover:text-green-800 font-medium">
                Ver todos
              </a>
            </div>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              ${products.slice(0, 4).map(product => createProductCard(product)).join('')}
            </div>
          </div>
        `)
        .join('');
      
      // Agregar eventos a los botones
      addAddToCartEvents();
    }
    
    // Función para añadir eventos a los botones "Agregar"
    function addAddToCartEvents() {
      document.querySelectorAll('[data-product-id]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = e.currentTarget.getAttribute('data-product-id');
          if (productId) {
            const products = getProducts();
            const product = products.find(p => p.id === productId);
            
            if (product && addToCart(product)) {
              showToast(`${product.name} añadido al carrito`);
              updateCartCount();
            } else {
              showToast('No se pudo añadir el producto', true);
            }
          }
        });
      });
    }
    
    // On document load
    document.addEventListener('DOMContentLoaded', () => {
      // Check authentication
      const user = checkUserAuth();
      if (!user) return;
      
      // Renderizar productos
      renderFeaturedProducts();
      renderAllProducts();
    });
  </script>
</MainLayout>