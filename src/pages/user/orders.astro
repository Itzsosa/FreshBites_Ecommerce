---
import MainLayout from '../../layouts/MainLayout.astro';
// No importamos OrderSummary ni getUserOrders aquí para evitar problemas con localStorage

// Verificar si viene de una compra exitosa (esto es seguro porque no accede a localStorage)
const urlParams = new URL(Astro.request.url).searchParams;
const showSuccess = urlParams.get('success') === 'true';
---

<MainLayout title="FreshBites - Mis Pedidos">
  <div class="bg-white rounded-lg shadow-md p-6">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Mis Pedidos</h1>
    
    {showSuccess && (
      <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-6" role="alert" id="success-alert">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" />
          </svg>
          <span class="font-medium">¡Compra realizada con éxito!</span>
        </div>
        <span class="absolute top-0 bottom-0 right-0 px-4 py-3" id="close-alert">
          <svg class="fill-current h-6 w-6 text-green-500 cursor-pointer" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <title>Cerrar</title>
            <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z" />
          </svg>
        </span>
      </div>
    )}
    
    <!-- Contenedor para los pedidos -->
    <div id="orders-container">
      <div class="text-center py-8">
        <p class="text-gray-500">Cargando pedidos...</p>
      </div>
    </div>
  </div>

  <script>
    // Función para obtener el usuario actual
    function getCurrentUser() {
      try {
        const userStr = localStorage.getItem('freshbites_current_user');
        return userStr ? JSON.parse(userStr) : null;
      } catch (error) {
        console.error('Error al obtener usuario actual:', error);
        return null;
      }
    }
    
    // Obtener todos los pedidos
    function getAllOrders() {
      try {
        const ordersStr = localStorage.getItem('orders');
        return ordersStr ? JSON.parse(ordersStr) : [];
      } catch (error) {
        console.error('Error al obtener pedidos:', error);
        return [];
      }
    }
    
    // Obtener pedidos del usuario
    function getUserOrders() {
      try {
        const user = getCurrentUser();
        if (!user) return [];
        
        const allOrders = getAllOrders();
        return allOrders
          .filter(order => order.userId === user.id)
          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()); // Ordenar por fecha descendente
      } catch (error) {
        console.error('Error al obtener pedidos del usuario:', error);
        return [];
      }
    }
    
    // Formatear fecha
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('es-CR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    // Formatear precio
    function formatPrice(price) {
      return new Intl.NumberFormat('es-CR', {
        style: 'currency',
        currency: 'CRC'
      }).format(price);
    }
    
    // Renderizar los pedidos
    function renderOrders() {
      const orders = getUserOrders();
      const ordersContainer = document.getElementById('orders-container');
      
      if (!ordersContainer) return;
      
      if (orders.length > 0) {
        ordersContainer.innerHTML = orders.map((order, index) => `
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-4">
            <div class="p-4 bg-green-50 border-b border-gray-200">
              <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
                <div>
                  <h3 class="font-medium text-gray-800">Pedido #${order.id.substring(6, 14)}</h3>
                  <p class="text-sm text-gray-600">${formatDate(order.date)}</p>
                </div>
                <div class="mt-2 md:mt-0">
                  <span class="font-bold text-green-600">${formatPrice(order.total)}</span>
                </div>
              </div>
            </div>
            
            <div class="p-4 ${index === 0 && showSuccess ? '' : 'hidden'}" data-order-details id="order-details-${order.id}">
              <h4 class="font-medium text-gray-800 mb-2">Productos:</h4>
              <ul class="divide-y divide-gray-200">
                ${order.items.map(item => `
                  <li class="py-2">
                    <div class="flex justify-between">
                      <span class="text-gray-800">${item.name} x${item.quantity}</span>
                      <span class="text-gray-600">${formatPrice(item.price * item.quantity)}</span>
                    </div>
                    <div class="text-sm text-gray-500">
                      Precio unitario: ${formatPrice(item.price)}
                    </div>
                  </li>
                `).join('')}
              </ul>
              
              <div class="mt-4 pt-3 border-t border-gray-200">
                <div class="flex justify-between font-medium">
                  <span class="text-gray-800">Total:</span>
                  <span class="text-green-600">${formatPrice(order.total)}</span>
                </div>
              </div>
            </div>
            
            <div class="p-3 bg-gray-50 border-t border-gray-200">
              <button 
                class="text-sm text-blue-600 hover:text-blue-800 focus:outline-none w-full text-center"
                data-toggle-details
                data-order-id="${order.id}"
              >
                <span data-show-text ${index === 0 && showSuccess ? 'class="hidden"' : ''}>Ver detalles</span>
                <span data-hide-text ${index === 0 && showSuccess ? '' : 'class="hidden"'}>Ocultar detalles</span>
              </button>
            </div>
          </div>
        `).join('');
        
        // Agregar event listeners a los toggles de detalles
        setupOrderToggles();
      } else {
        ordersContainer.innerHTML = `
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
            <div class="mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <h2 class="text-xl font-semibold text-gray-700 mb-2">No tienes pedidos realizados</h2>
            <p class="text-gray-500 mb-6">¡Empieza a comprar y disfruta de nuestros productos frescos!</p>
            <a href="/user/home" class="inline-block bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors">
              Ir a comprar
            </a>
          </div>
        `;
      }
    }
    
    // Configurar los toggles para mostrar/ocultar detalles del pedido
    function setupOrderToggles() {
      document.querySelectorAll('[data-toggle-details]').forEach(button => {
        button.addEventListener('click', (e) => {
          const orderId = e.currentTarget.dataset.orderId;
          const detailsContainer = document.querySelector(`#order-details-${orderId}`);
          const showText = button.querySelector('[data-show-text]');
          const hideText = button.querySelector('[data-hide-text]');
          
          if (detailsContainer && showText && hideText) {
            const isHidden = detailsContainer.classList.contains('hidden');
            
            if (isHidden) {
              detailsContainer.classList.remove('hidden');
              showText.classList.add('hidden');
              hideText.classList.remove('hidden');
            } else {
              detailsContainer.classList.add('hidden');
              showText.classList.remove('hidden');
              hideText.classList.add('hidden');
            }
          }
        });
      });
    }
    
    // Cerrar alerta de éxito
    function setupAlertHandling() {
      const closeButton = document.getElementById('close-alert');
      const alert = document.getElementById('success-alert');
      
      if (closeButton && alert) {
        closeButton.addEventListener('click', () => {
          alert.style.opacity = '0';
          setTimeout(() => {
            alert.remove();
          }, 300);
        });
        
        // Auto cerrar después de 5 segundos
        setTimeout(() => {
          alert.style.opacity = '0';
          setTimeout(() => {
            alert.remove();
          }, 300);
        }, 5000);
      }
      
      // Limpiar parámetros de URL
      if (window.history && window.history.replaceState) {
        const url = window.location.href.split('?')[0];
        window.history.replaceState({}, document.title, url);
      }
    }
    
    // Protection script
    function checkAuth() {
      const userStr = localStorage.getItem('freshbites_current_user');
      if (!userStr) {
        window.location.href = '/login';
      }
    }
    
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Cargando pedidos...');
      checkAuth();
      renderOrders();
      setupAlertHandling();
    });
  </script>
</MainLayout>