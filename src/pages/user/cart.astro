---
import MainLayout from '../../layouts/MainLayout.astro';
import CartItem from '../../components/CartItem.astro';
// No importamos getCart y getCartTotal aquí para evitar usarlos en el servidor
---

<MainLayout title="FreshBites - Carrito de Compras">
  <div class="bg-white rounded-lg shadow-md p-6">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Tu Carrito de Compras</h1>
    
    <!-- Contenedor para el carrito - se llenará desde JavaScript -->
    <div id="cart-container">
      <div class="text-center py-8">
        <p class="text-gray-500">Cargando carrito...</p>
      </div>
    </div>
  </div>

  <!-- Toast de notificación -->
  <div id="toast" class="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg transform translate-y-20 opacity-0 transition-all duration-300">
    <p id="toast-message">Producto actualizado</p>
  </div>
  
  <!-- Loader de procesamiento -->
  <div id="processing-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto"></div>
      <p class="mt-4 text-gray-700">Procesando tu pedido...</p>
    </div>
  </div>

  <script>
    // En lugar de importar directamente, declaramos las funciones que usaremos
    // y las implementamos para acceder directamente al localStorage
    
    // Función para obtener el usuario actual
    function getCurrentUser() {
      try {
        const userStr = localStorage.getItem('freshbites_current_user');
        return userStr ? JSON.parse(userStr) : null;
      } catch (error) {
        console.error('Error al obtener usuario actual:', error);
        return null;
      }
    }
    
    // Obtener el carrito
    function getCart() {
      try {
        const user = getCurrentUser();
        if (!user) return [];
        
        const cartKey = `cart_${user.id}`;
        const cartStr = localStorage.getItem(cartKey);
        return cartStr ? JSON.parse(cartStr) : [];
      } catch (error) {
        console.error('Error al obtener carrito:', error);
        return [];
      }
    }
    
    // Guardar carrito
    function saveCart(cart) {
      try {
        const user = getCurrentUser();
        if (!user) return false;
        
        const cartKey = `cart_${user.id}`;
        localStorage.setItem(cartKey, JSON.stringify(cart));
        return true;
      } catch (error) {
        console.error('Error al guardar carrito:', error);
        return false;
      }
    }
    
    // Actualizar cantidad
    function updateCartItemQuantity(productId, quantity) {
      if (quantity < 1) return false;
      
      try {
        const cart = getCart();
        const itemIndex = cart.findIndex(item => item.productId === productId);
        
        if (itemIndex >= 0) {
          cart[itemIndex].quantity = quantity;
          saveCart(cart);
          return true;
        }
        return false;
      } catch (error) {
        console.error('Error al actualizar cantidad:', error);
        return false;
      }
    }
    
    // Eliminar producto
    function removeFromCart(productId) {
      try {
        let cart = getCart();
        cart = cart.filter(item => item.productId !== productId);
        return saveCart(cart);
      } catch (error) {
        console.error('Error al eliminar producto:', error);
        return false;
      }
    }
    
    // Calcular total
    function getCartTotal() {
      try {
        const cart = getCart();
        return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
      } catch (error) {
        console.error('Error al calcular total:', error);
        return 0;
      }
    }
    
    // Crear pedido
    function createOrderFromCart() {
      try {
        const user = getCurrentUser();
        if (!user) return null;
        
        const cart = getCart();
        if (cart.length === 0) return null;
        
        const total = getCartTotal();
        const orderId = 'order-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
        
        const newOrder = {
          id: orderId,
          userId: user.id,
          userName: user.name,
          date: new Date().toISOString(),
          items: [...cart],
          total
        };
        
        // Guardar pedido
        const ordersStr = localStorage.getItem('orders');
        const orders = ordersStr ? JSON.parse(ordersStr) : [];
        orders.push(newOrder);
        localStorage.setItem('orders', JSON.stringify(orders));
        
        // Limpiar carrito
        saveCart([]);
        
        return newOrder;
      } catch (error) {
        console.error('Error al crear pedido:', error);
        return null;
      }
    }
    
    // Formato de precios
    function formatPrice(price) {
      return new Intl.NumberFormat('es-CR', {
        style: 'currency',
        currency: 'CRC'
      }).format(price);
    }
    
    // Mostrar toast de notificación
    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      const toastMessage = document.getElementById('toast-message');
      
      if (toast && toastMessage) {
        toast.classList.remove('translate-y-20', 'opacity-0', 'bg-green-600', 'bg-red-600');
        toast.classList.add(isError ? 'bg-red-600' : 'bg-green-600');
        toastMessage.textContent = message;
        
        setTimeout(() => {
          toast.classList.remove('translate-y-20', 'opacity-0');
          toast.classList.add('translate-y-0', 'opacity-100');
        }, 10);
        
        setTimeout(() => {
          toast.classList.remove('translate-y-0', 'opacity-100');
          toast.classList.add('translate-y-20', 'opacity-0');
        }, 3000);
      }
    }
    
    // Renderizar el carrito
    function renderCart() {
      const cart = getCart();
      const cartTotal = getCartTotal();
      const cartContainer = document.getElementById('cart-container');
      
      if (!cartContainer) return;
      
      if (cart.length > 0) {
        cartContainer.innerHTML = `
          <div class="flex flex-col lg:flex-row gap-6">
            <!-- Lista de productos en el carrito -->
            <div class="flex-grow">
              <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                <div class="p-4 bg-green-50 border-b border-gray-200">
                  <h2 class="text-lg font-medium text-gray-800">Productos en tu carrito</h2>
                </div>
                
                <div id="cart-items">
                  ${cart.map(item => `
                    <div class="flex flex-col sm:flex-row items-center p-4 gap-3 border-b border-gray-200 last:border-0">
                      <div class="w-20 h-20 bg-gray-100 rounded overflow-hidden flex-shrink-0">
                        ${item.imageBase64 ? 
                          `<img src="${item.imageBase64}" alt="${item.name}" class="w-full h-full object-cover" />` : 
                          `<div class="w-full h-full flex items-center justify-center text-gray-400">
                            <span>Sin imagen</span>
                          </div>`
                        }
                      </div>
                      
                      <div class="flex-grow sm:ml-4 text-center sm:text-left">
                        <h3 class="text-lg font-medium text-gray-900">${item.name}</h3>
                        <p class="text-green-600 font-medium">${formatPrice(item.price)}</p>
                      </div>
                      
                      <div class="flex items-center gap-2">
                        <label class="text-sm text-gray-600 mr-2 whitespace-nowrap">Cantidad:</label>
                        <div class="flex border border-gray-300 rounded-md">
                          <button 
                            class="px-3 py-1 text-gray-600 hover:bg-gray-100 focus:outline-none" 
                            data-action="decrease"
                            data-product-id="${item.productId}"
                          >
                            -
                          </button>
                          <input
                            type="number"
                            min="1"
                            value="${item.quantity}"
                            class="w-12 text-center border-0 focus:outline-none focus:ring-0"
                            data-product-id="${item.productId}"
                            data-product-quantity
                          />
                          <button 
                            class="px-3 py-1 text-gray-600 hover:bg-gray-100 focus:outline-none" 
                            data-action="increase"
                            data-product-id="${item.productId}"
                          >
                            +
                          </button>
                        </div>
                      </div>
                      
                      <div class="flex items-center gap-3 ml-0 sm:ml-4">
                        <span class="font-medium whitespace-nowrap">
                          ${formatPrice(item.price * item.quantity)}
                        </span>
                        <button 
                          class="text-red-500 hover:text-red-700 focus:outline-none"
                          data-action="remove"
                          data-product-id="${item.productId}"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
            </div>
            
            <!-- Resumen del carrito -->
            <div class="lg:w-80">
              <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden sticky top-6">
                <div class="p-4 bg-green-50 border-b border-gray-200">
                  <h2 class="text-lg font-medium text-gray-800">Resumen</h2>
                </div>
                
                <div class="p-4">
                  <div class="flex justify-between py-2">
                    <span class="text-gray-600">Subtotal:</span>
                    <span class="font-medium" id="cart-subtotal">${formatPrice(cartTotal)}</span>
                  </div>
                  <div class="border-t border-gray-200 my-2"></div>
                  <div class="flex justify-between py-2">
                    <span class="font-medium text-gray-800">Total:</span>
                    <span class="font-bold text-green-600" id="cart-total">${formatPrice(cartTotal)}</span>
                  </div>
                  
                  <button id="checkout-btn" class="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors">
                    Finalizar Compra
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      } else {
        cartContainer.innerHTML = `
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
            <div class="mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
            <h2 class="text-xl font-semibold text-gray-700 mb-2">Tu carrito está vacío</h2>
            <p class="text-gray-500 mb-6">Parece que aún no has añadido productos a tu carrito</p>
            <a href="/user/home" class="inline-block bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors">
              Ir a comprar
            </a>
          </div>
        `;
      }
      
      // Configurar los eventos después de renderizar
      setupEventListeners();
    }
    
    // Actualizar los totales en la interfaz
    function updateCartTotals() {
      const total = getCartTotal();
      const subtotalElement = document.getElementById('cart-subtotal');
      const totalElement = document.getElementById('cart-total');
      
      if (subtotalElement) subtotalElement.textContent = formatPrice(total);
      if (totalElement) totalElement.textContent = formatPrice(total);
    }
    
    // Configurar event listeners para los botones del carrito
    function setupEventListeners() {
      // Manejar incremento/decremento de cantidad
      document.querySelectorAll('[data-action="increase"], [data-action="decrease"]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = e.currentTarget.dataset.productId;
          const action = e.currentTarget.dataset.action;
          const inputElement = document.querySelector(`input[data-product-id="${productId}"]`);
          
          if (inputElement) {
            let quantity = parseInt(inputElement.value, 10);
            
            if (action === 'increase') {
              quantity += 1;
            } else if (action === 'decrease' && quantity > 1) {
              quantity -= 1;
            }
            
            // Actualizar input
            inputElement.value = quantity.toString();
            
            // Actualizar en localStorage
            if (updateCartItemQuantity(productId, quantity)) {
              updateCartTotals();
              showToast('Cantidad actualizada');
            }
          }
        });
      });
      
      // Manejar cambio directo en el input de cantidad
      document.querySelectorAll('input[data-product-quantity]').forEach(input => {
        input.addEventListener('change', (e) => {
          const productId = e.currentTarget.dataset.productId;
          let quantity = parseInt(e.currentTarget.value, 10);
          
          // Asegurar que la cantidad sea al menos 1
          if (isNaN(quantity) || quantity < 1) {
            quantity = 1;
            e.currentTarget.value = '1';
          }
          
          // Actualizar en localStorage
          if (updateCartItemQuantity(productId, quantity)) {
            updateCartTotals();
            showToast('Cantidad actualizada');
          }
        });
      });
      
      // Manejar eliminación de productos
      document.querySelectorAll('[data-action="remove"]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = e.currentTarget.dataset.productId;
          const itemElement = e.currentTarget.closest('.flex');
          
          if (itemElement && removeFromCart(productId)) {
            // Animar y eliminar el elemento
            itemElement.style.transition = 'all 0.3s ease';
            itemElement.style.opacity = '0';
            itemElement.style.height = '0';
            
            setTimeout(() => {
              itemElement.remove();
              updateCartTotals();
              
              // Si no quedan productos, recargar la página
              if (document.querySelectorAll('#cart-items > div').length === 0) {
                renderCart();
              }
            }, 300);
            
            showToast('Producto eliminado del carrito');
          }
        });
      });
      
      // Manejar finalización de compra
      const checkoutBtn = document.getElementById('checkout-btn');
      if (checkoutBtn) {
        checkoutBtn.addEventListener('click', async () => {
          // Mostrar overlay de procesamiento
          const processingOverlay = document.getElementById('processing-overlay');
          if (processingOverlay) {
            processingOverlay.classList.remove('hidden');
          }
          
          // Simular procesamiento
          setTimeout(() => {
            // Crear pedido
            const order = createOrderFromCart();
            
            if (order) {
              // Redirigir a la página de pedidos
              window.location.href = '/user/orders?success=true';
            } else {
              if (processingOverlay) {
                processingOverlay.classList.add('hidden');
              }
              showToast('No se pudo procesar el pedido', true);
            }
          }, 1500); // Simular un tiempo de procesamiento de 1.5 segundos
        });
      }
    }
    
    // Protection script
    function checkAuth() {
      const userStr = localStorage.getItem('freshbites_current_user');
      if (!userStr) {
        window.location.href = '/login';
      }
    }
    
    // Ejecutar cuando el contenido del DOM esté cargado
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Cargando carrito...');
      checkAuth();
      renderCart();
    });
  </script>
</MainLayout>