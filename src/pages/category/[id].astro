---
import MainLayout from '../../layouts/MainLayout.astro';
import ProductCard from '../../components/ProductCard.astro';
// Removemos las importaciones de los servicios, ya que cargaremos los datos del lado del cliente
// import { getProducts } from '../../services/productService';
// import { getCategoryById } from '../../services/categoryService';

// Configurar la página para renderizado en servidor en lugar de estático
export const prerender = false;

// Obtener el ID de la categoría de la URL
const { id } = Astro.params;
---

<MainLayout title="Categoría - FreshBites">
  <div class="max-w-7xl mx-auto px-4 py-8" id="category-container">
    <div class="text-center py-8">
      <div class="animate-pulse">
        <div class="h-8 bg-gray-200 rounded w-1/4 mx-auto mb-4"></div>
        <div class="h-4 bg-gray-200 rounded w-2/3 mx-auto mb-8"></div>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {Array(4).fill(0).map(() => (
            <div class="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
              <div class="h-48 bg-gray-100"></div>
              <div class="p-4">
                <div class="h-5 bg-gray-200 rounded w-3/4 mb-3"></div>
                <div class="h-4 bg-gray-200 rounded w-1/2 mb-3"></div>
                <div class="h-6 bg-gray-200 rounded w-1/4 mt-3"></div>
              </div>
            </div>
          ))}

        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ categoryId: id }}>
    // User page protection
    function checkUserAuth() {
      const userStr = localStorage.getItem('freshbites_current_user');
      if (!userStr) {
        window.location.href = '/login';
        return null;
      }
      
      const user = JSON.parse(userStr);
      return user;
    }

    // Obtener productos del localStorage
    function getProducts() {
      try {
        const productsStr = localStorage.getItem('products');
        return productsStr ? JSON.parse(productsStr) : [];
      } catch (error) {
        console.error('Error al obtener productos:', error);
        return [];
      }
    }

    // Obtener categorías del localStorage
    function getCategories() {
      try {
        const categoriesStr = localStorage.getItem('categories');
        return categoriesStr ? JSON.parse(categoriesStr) : [];
      } catch (error) {
        console.error('Error al obtener categorías:', error);
        return [];
      }
    }

    // Función para obtener una categoría por ID
    function getCategoryById(categoryId) {
      const categories = getCategories();
      return categories.find(cat => cat.id === categoryId) || null;
    }

    // Formatear precio
    function formatPrice(price) {
      return new Intl.NumberFormat('es-CR', {
        style: 'currency',
        currency: 'CRC'
      }).format(price);
    }

    // Crear tarjeta de producto HTML
    function createProductCard(product) {
      const category = getCategoryById(product.categoryId);
      const categoryName = category ? category.name : 'Sin categoría';
      
      return `
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow">
          <div class="h-48 bg-gray-100 flex items-center justify-center overflow-hidden">
            ${product.imageBase64 
              ? `<img src="${product.imageBase64}" alt="${product.name}" class="h-full w-full object-cover">`
              : `<span class="text-gray-500">Imagen no disponible</span>`
            }
          </div>
          <div class="p-4">
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-medium text-gray-900">${product.name}</h3>
              <span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                ${categoryName}
              </span>
            </div>
            ${product.description 
              ? `<p class="text-gray-600 mt-2 text-sm line-clamp-2">${product.description}</p>`
              : ''
            }
            <div class="mt-3 flex justify-between items-center">
              <span class="text-green-600 font-medium">${formatPrice(product.price)}</span>
              <button 
                class="bg-green-600 hover:bg-green-700 text-white text-sm py-1.5 px-3 rounded"
                data-product-id="${product.id}"
              >
                Agregar
              </button>
            </div>
          </div>
        </div>
      `;
    }

    function renderCategoryPage() {
      const container = document.getElementById('category-container');
      if (!container) return;
      
      // Obtener la categoría
      const category = getCategoryById(categoryId);
      
      if (!category) {
        container.innerHTML = `
          <div class="text-center py-12">
            <h1 class="text-2xl font-bold text-gray-900 mb-4">Categoría no encontrada</h1>
            <p class="text-gray-600 mb-6">La categoría que estás buscando no existe o ha sido eliminada.</p>
            <a href="/user/home" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded">
              Volver al inicio
            </a>
          </div>
        `;
        return;
      }
      
      // Obtener productos filtrados por categoría
      const products = getProducts().filter(product => product.categoryId === categoryId);
      
      // Renderizar la página
      container.innerHTML = `
        <div class="mb-8">
          <a href="/user/home" class="text-green-600 hover:text-green-800 flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
            </svg>
            Volver al inicio
          </a>
        </div>
        
        <h1 class="text-2xl font-bold text-gray-900 mb-2">${category.name}</h1>
        <p class="text-gray-600 mb-6">Explora todos nuestros productos de esta categoría</p>
        
        ${products.length === 0 ? `
          <div class="text-center py-12 bg-gray-50 rounded-lg">
            <p class="text-gray-500 mb-4">No hay productos disponibles en esta categoría</p>
            <a href="/user/home" class="text-green-600 hover:text-green-800 font-medium">
              Ver otras categorías
            </a>
          </div>
        ` : `
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            ${products.map(product => createProductCard(product)).join('')}
          </div>
        `}
      `;
      
      // Agregar eventos a los botones de "Agregar"
      document.querySelectorAll('[data-product-id]').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = e.currentTarget.getAttribute('data-product-id');
          if (productId) {
            // Aquí se puede implementar la lógica del carrito
            alert(`Producto agregado al carrito: ${productId}`);
          }
        });
      });

      // Actualizar el título de la página
      document.title = `${category.name} - FreshBites`;
    }
    
    // On document load
    document.addEventListener('DOMContentLoaded', () => {
      const user = checkUserAuth();
      if (!user) return;
      
      renderCategoryPage();
    });
  </script>
</MainLayout>