---
import AuthLayout from '../layouts/AuthLayout.astro';
import FormInput from '../components/FormInput.astro';
import { validateLoginForm } from '../utils/validators';
---

<AuthLayout title="Iniciar Sesión">
  <form id="loginForm" class="space-y-6">
    <FormInput
      type="email"
      name="email"
      label="Correo Electrónico"
      value=""
      placeholder="tu@email.com"
      required={true}
    />
    
    <FormInput
      type="password"
      name="password"
      label="Contraseña"
      value=""
      placeholder="Tu contraseña"
      required={true}
    />
    
    <div class="flex items-center justify-between">
      <div class="flex items-center">
        <input id="remember-me" name="remember-me" type="checkbox" class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
        <label for="remember-me" class="ml-2 block text-sm text-gray-700">
          Recordarme
        </label>
      </div>
      
      <div class="text-sm">
        <a href="#" class="font-medium text-green-600 hover:text-green-500">
          ¿Olvidaste tu contraseña?
        </a>
      </div>
    </div>
    
    <div id="formError" class="text-red-500 text-sm hidden"></div>
    
    <div>
      <button
        type="submit"
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
      >
        Iniciar Sesión
      </button>
    </div>
  </form>
  
  <div class="mt-6">
    <div class="relative">
      <div class="absolute inset-0 flex items-center">
        <div class="w-full border-t border-gray-300"></div>
      </div>
      <div class="relative flex justify-center text-sm">
        <span class="px-2 bg-white text-gray-500">
          ¿No tienes una cuenta?
        </span>
      </div>
    </div>
    
    <div class="mt-6">
      <a
        href="/register"
        class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
      >
        Crear nueva cuenta
      </a>
    </div>
  </div>

  <script>
    // Initialize auth service
    function initializeAuth() {
      const ADMIN_USER = {
        id: 'admin-id',
        name: 'Administrador',
        email: 'admin@admin.com',
        password: 'admin1234',
        role: 'admin'
      };
      
      const USERS_KEY = 'freshbites_users';
      const users = localStorage.getItem(USERS_KEY);
      if (!users) {
        localStorage.setItem(USERS_KEY, JSON.stringify([ADMIN_USER]));
      }
    }
    
    // Validate form fields
    function validateForm(email, password) {
      const errors = {};
      
      if (!email.trim()) {
        errors.email = 'El correo electrónico es requerido';
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        errors.email = 'Ingrese un correo electrónico válido';
      }
      
      if (!password.trim()) {
        errors.password = 'La contraseña es requerida';
      }
      
      return {
        isValid: Object.keys(errors).length === 0,
        errors
      };
    }
    
    // Login user
    function loginUser(credentials) {
      try {
        const USERS_KEY = 'freshbites_users';
        const CURRENT_USER_KEY = 'freshbites_current_user';
        
        const usersStr = localStorage.getItem(USERS_KEY);
        const users = usersStr ? JSON.parse(usersStr) : [];
        
        const user = users.find(
          u => u.email === credentials.email && u.password === credentials.password
        );
        
        if (!user) {
          return { success: false, message: 'Credenciales incorrectas' };
        }
        
        // Save user to local storage (excluding password)
        const { password, ...safeUser } = user;
        localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(safeUser));
        
        return {
          success: true,
          message: 'Inicio de sesión exitoso',
          user: safeUser
        };
      } catch (error) {
        return { success: false, message: 'Error al iniciar sesión' };
      }
    }
    
    // Check if already logged in
    function checkAuthenticated() {
      const userStr = localStorage.getItem('freshbites_current_user');
      if (userStr) {
        const user = JSON.parse(userStr);
        // Redirect based on role
        if (user.role === 'admin') {
          window.location.href = '/admin/dashboard';
        } else {
          window.location.href = '/user/home';
        }
      }
    }
    
    // On document load
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize auth with admin user
      initializeAuth();
      
      // Check if user is already logged in
      checkAuthenticated();
      
      // Get form elements
      const form = document.getElementById('loginForm');
      const formError = document.getElementById('formError');
      
      // Handle form submission
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Clear previous errors
        formError.classList.add('hidden');
        formError.textContent = '';
        
        // Get form data
        const formData = new FormData(form);
        const email = formData.get('email');
        const password = formData.get('password');
        
        // Validate the form
        const validation = validateForm(email, password);
        if (!validation.isValid) {
          // Display the first error
          const firstError = Object.values(validation.errors)[0];
          formError.textContent = firstError;
          formError.classList.remove('hidden');
          return;
        }
        
        // Attempt login
        const result = loginUser({ email, password });
        
        if (result.success) {
          // Redirect based on user role
          if (result.user.role === 'admin') {
            window.location.href = '/admin/dashboard';
          } else {
            window.location.href = '/user/home';
          }
        } else {
          // Show error
          formError.textContent = result.message;
          formError.classList.remove('hidden');
        }
      });
    });
  </script>
</AuthLayout>