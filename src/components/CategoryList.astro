---
import { Category } from '../services/categoryService';

export interface Props {
  categories: Category[];
}

const { categories } = Astro.props;
---

<div class="bg-white rounded-lg shadow-md p-6">
  <h2 class="text-xl font-semibold text-gray-800 mb-4">Listado de Categorías</h2>

  <div id="categoriesContainer">
    <div id="emptyMessage" class="py-4 text-center text-gray-500">
      No hay categorías disponibles. Crea una nueva categoría para comenzar.
    </div>
    
    <div id="categoriesTable" class="overflow-x-auto hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              ID
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Nombre
            </th>
            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody id="categoryTableBody" class="bg-white divide-y divide-gray-200">
          <!-- Las filas de categorías se generarán dinámicamente con JavaScript -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
  // Función para cargar las categorías desde localStorage
  function loadAndDisplayCategories() {
    const categoriesStr = localStorage.getItem('categories');
    const categories = categoriesStr ? JSON.parse(categoriesStr) : [];
    
    const emptyMessage = document.getElementById('emptyMessage');
    const categoriesTable = document.getElementById('categoriesTable');
    const tableBody = document.getElementById('categoryTableBody');
    
    if (!emptyMessage || !categoriesTable || !tableBody) return;
    
    // Limpiar el contenido actual
    tableBody.innerHTML = '';
    
    // Mostrar mensaje o tabla según si hay categorías
    if (categories.length === 0) {
      emptyMessage.classList.remove('hidden');
      categoriesTable.classList.add('hidden');
    } else {
      emptyMessage.classList.add('hidden');
      categoriesTable.classList.remove('hidden');
      
      // Crear filas para cada categoría
      categories.forEach(category => {
        const row = document.createElement('tr');
        row.className = 'category-row';
        row.dataset.id = category.id;
        
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${category.id}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
            ${category.name}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button 
              class="edit-button text-indigo-600 hover:text-indigo-900 mr-4"
              data-id="${category.id}"
            >
              Editar
            </button>
            <button 
              class="delete-button text-red-600 hover:text-red-900"
              data-id="${category.id}"
            >
              Eliminar
            </button>
          </td>
        `;
        
        tableBody.appendChild(row);
      });
    }
  }
  
  // Cargar categorías cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', loadAndDisplayCategories);
  
  // Crear un evento personalizado para actualizar la lista de categorías
  window.addEventListener('categoriesUpdated', loadAndDisplayCategories);
  
  // Escuchar cambios en localStorage (esto ayuda cuando se usa el sitio en múltiples pestañas)
  window.addEventListener('storage', event => {
    if (event.key === 'categories') {
      loadAndDisplayCategories();
    }
  });
</script>